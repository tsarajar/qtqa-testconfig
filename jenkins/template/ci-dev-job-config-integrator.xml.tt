<?xml version='1.0' encoding='UTF-8'?>
<matrix-project>
  <description>CI for [% gerrit_project %] '[% branch %]' branch on [% gerrit_host %] [automatically generated from [% job_template %]]</description>
  <disabled>[% enabled ? "false" : "true" %]</disabled>

  <!-- clean up old builds -->
  <logRotator>
    <daysToKeep>[% log_days_to_keep %]</daysToKeep>
    <numToKeep>[% log_num_to_keep %]</numToKeep>
    <artifactDaysToKeep>[% log_days_to_keep %]</artifactDaysToKeep>
    <artifactNumToKeep>[% log_num_to_keep %]</artifactNumToKeep>
  </logRotator>

  <!-- properties passed in by integrator script -->
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>qt_ci_git_url</name>
          <description>Git URL for code under test</description>
          <defaultValue>ssh://[% gerrit_host %]/[% gerrit_project %]</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>qt_ci_git_ref</name>
          <description>Git ref for code under test</description>
          <defaultValue>refs/heads/[% branch %]</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>qt_ci_request_id</name>
          <description>Qt Project CI system build request ID; leave blank for manual trigger</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DELETE_VM</name>
          <description>1</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>

  <triggers class="vector">
    <!-- normally we are triggered by incoming build requests, but a cron trigger may also be configured. -->
    [%- IF trigger_cron %]
    <hudson.triggers.TimerTrigger>
      <spec>[% trigger_cron %]</spec>
    </hudson.triggers.TimerTrigger>
    [%- END %]
  </triggers>

  <!--
    We use a custom workspace to keep the build path short and not too ugly.
    Default is something like:

       /work/workspace/QtBase_master_Integration/cfg/linux-g++-32_Ubuntu_10.04_x86

    With our changes:

       /work/ci/qt/qtbase/master

    Note the portion prior to the branch is shared on the Jenkins master among
    all jobs tracking this gerrit project. This should not be harmful, since we
    don't actually use the workspace on the master.
  -->
  <customWorkspace>ci/[% gerrit_project %]</customWorkspace>
  <childCustomWorkspace>[% branch %]</childCustomWorkspace>

  <!-- test configurations -->
  <axes>
    <hudson.matrix.LabelAxis>
      <name>cfg</name>
      <values>
       [%- FOREACH cfg IN configurations %]
        <string>[% cfg %]</string>
       [%- END %]
      </values>
    </hudson.matrix.LabelAxis>
  </axes>

  <!-- pre-build steps -->
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper/>
[%- IF on_demand == 1 %]
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.4.0">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
[%- END %]
    <org.jenkinsci.plugins.preSCMbuildstep.PreSCMBuildStepsWrapper>
      <buildSteps>

        <!--
            Prior to every build, we do:

              - Try to pre-populate the git repo from a mirror.
                This is an optimization - not a fatal error if it fails.

              - Create and use an empty build directory every time.
                'git clean -dqffx' is insufficient because git may leave a
                corrupted or locked repository if it crashes.
                It is also nice to use a shorter path because the presence of some characters
                in the Jenkins paths (like '+' from linux-g++) can cause subtle problems.

            Note this is run only on slaves; the master doesn't interact with the git repo
            at all.
        -->
        <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
          <condition class="org.jenkins_ci.plugins.run_condition.logic.And">
            <conditions>
              <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
                <condition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition">
                  <!--
                    A node is judged as Windows if it has 'windows' as one of its labels.
                  -->
[%- IF on_demand == 1 %]
                  <expression>^o-win.*$</expression>
[%- ELSE %]
                  <expression>^.*\bwindows\b.*$</expression>
[%- END %]
                  <label>${NODE_LABELS}</label>
                </condition>
              </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
              <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
                <condition class="org.jenkins_ci.plugins.run_condition.logic.Not">
                  <condition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition">
                    <expression>^.*\bmaster\b.*$</expression>
                    <label>${NODE_LABELS}</label>
                  </condition>
                </condition>
              </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
            </conditions>
          </condition>
          <buildStep class="hudson.tasks.BatchFile">
            <command>
[%- IF on_demand == 1 %]
mkdir c:\work\build
cd c:\work\build
[%- ELSE %]
rd /S /Q %WORKSPACE%\_artifacts
rd /S /Q %CI_NODE_ROOT%\build &amp; IF EXIST %CI_NODE_ROOT%\build TIMEOUT /T 5 &amp; rd /S /Q %CI_NODE_ROOT%\build
mkdir %CI_NODE_ROOT%\build
cd %CI_NODE_ROOT%\build
[%- END %]
call git init
if errorlevel 1 exit /b 1
[%- IF gerrit_host != "codereview.qt-project.org" %]
call git fetch --verbose [% gerrit_host %]:[% gerrit_project %] +refs/heads/[% branch %]:refs/remotes/mirror/[% branch %]
[%- ELSE %]
call git fetch --verbose qt-gerrit-mirror:[% gerrit_project %] +refs/heads/[% branch %]:refs/remotes/mirror/[% branch %]
[%- END %]
exit /b 0
</command>
          </buildStep>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail"/>
        </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
        <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
          <condition class="org.jenkins_ci.plugins.run_condition.logic.And">
            <conditions>
              <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
                <condition class="org.jenkins_ci.plugins.run_condition.logic.Not">
                  <condition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition">
[%- IF on_demand == 1 %]
                    <expression>^o-win.*$</expression>
[%- ELSE %]
                    <expression>^.*\bwindows\b.*$</expression>
[%- END %]
                    <label>${NODE_LABELS}</label>
                  </condition>
                </condition>
              </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
              <org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
                <condition class="org.jenkins_ci.plugins.run_condition.logic.Not">
                  <condition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition">
                    <expression>^.*\bmaster\b.*$</expression>
                    <label>${NODE_LABELS}</label>
                  </condition>
                </condition>
              </org.jenkins__ci.plugins.run__condition.logic.ConditionContainer>
            </conditions>
          </condition>
          <buildStep class="hudson.tasks.Shell">
            <command>set +e
/opt/version.sh || echo "Unable to execute version.sh"
[%- IF on_demand == 1 %]
rm -rf /work/ci
rm -rf /work/build
mkdir -p /work/build
cd /work/build
[%- ELSE %]
rm -rf $WORKSPACE/_artifacts
rm -rf $CI_NODE_ROOT/build
mkdir -p $CI_NODE_ROOT/build
cd $CI_NODE_ROOT/build
[%- END %]
git init
[%- IF gerrit_host != "codereview.qt-project.org" %]
git fetch --verbose [% gerrit_host %]:[% gerrit_project %] +refs/heads/[% branch %]:refs/remotes/mirror/[% branch %]
[%- ELSE %]
git fetch --verbose qt-gerrit-mirror:[% gerrit_project %] +refs/heads/[% branch %]:refs/remotes/mirror/[% branch %]
[% END %]
</command>
          </buildStep>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail"/>
        </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
[%- IF on_demand == 1 %]
        <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.1">
          <condition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition" plugin="run-condition@1.0">
            <expression>^.*\bmaster\b.*$</expression>
            <label>${NODE_LABELS}</label>
          </condition>
          <buildStep class="hudson.plugins.parameterizedtrigger.TriggerBuilder" plugin="parameterized-trigger@2.21">
            <configs>
              <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
                <configs>
                  <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                    <properties>PARENT=${JOB_NAME}
BRANCH=[% template_ini_prefix %]</properties>
                  </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                </configs>
                <projects>create_nodes_and_vms</projects>
                <condition>ALWAYS</condition>
                <triggerWithNoParameters>false</triggerWithNoParameters>
                <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
              </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            </configs>
          </buildStep>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
        </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
[%- END %]
      </buildSteps>
    </org.jenkinsci.plugins.preSCMbuildstep.PreSCMBuildStepsWrapper>
  </buildWrappers>

  <!--
    Build commands.
    These just clone from qtqa/testconfig and run test.pl from there, which decides what else
    is to be done.
  -->
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
      <condition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition">
[%- IF on_demand == 1 %]
        <expression>^o-win.*$</expression>
[%- ELSE %]
        <expression>^.*\bwindows\b.*$</expression>
[%- END %]
        <label>${NODE_LABELS}</label>
      </condition>
      <buildStep class="hudson.tasks.BatchFile">
        <!-- GIT_BRANCH set for compatibility with Git SCM plugin -->
[%- IF on_demand == 1 %]
        <command>
setlocal enabledelayedexpansion

echo %cfg%|findstr /i winrt >nul:
if %errorlevel%==0 (
set "TARGET_ARCHITECTURE=x86"
) else (
set "TARGET_ARCHITECTURE=%PROCESSOR_ARCHITECTURE%"
)

echo %cfg%|findstr /i wince70embedded >nul:
if %errorlevel%==0 (
REM LIB/INCLUDE contains desktop openssl paths as set in jenkins ini,
REM reset them before calling vsvars32.bat if we are building for WEC7
set LIB=
set INCLUDE=
)
echo %cfg%|findstr /i msvc2008 >nul:
if %errorlevel%==0 (
call "%VS90COMNTOOLS%\vsvars32.bat"
)

echo %cfg%|findstr /i msvc2010 >nul:
if %errorlevel%==0 (
call "%VS100COMNTOOLS%\vsvars32.bat"
)

echo %cfg%|findstr /i msvc2012 >nul:
if %errorlevel%==0 (
call "%MSVC2012_DIR%\vcvarsall.bat" %TARGET_ARCHITECTURE%
)

)
cd c:\work\build
set GIT_BRANCH=%qt_ci_git_ref%
set
call git remote add origin -t %qt_ci_git_ref% %qt_ci_git_url%
if errorlevel 1 exit /b 1
call git pull origin %qt_ci_git_ref%
if errorlevel 1 exit /b 1
call git init _testconfig
if errorlevel 1 exit /b 1
cd _testconfig
call git fetch qt-gerrit-mirror:qtqa/testconfig +refs/heads/*:refs/remotes/mirror/*
<!--call git fetch git://gitorious.org/qtqa/tosarajas-testconfig.git +refs/heads/*:refs/remotes/origin/*-->
call git fetch git://github.com/tsarajar/qtqa-testconfig.git +refs/heads/*:refs/remotes/origin/*
if errorlevel 1 exit /b 1
call git reset --hard origin/master
if errorlevel 1 exit /b 1
cd ..
perl _testconfig/test.pl --project "[% testconfig_project %]"
[%- IF publish_build == "log_publisher" %]
set PUBLISHER_PARAMS="token=PUBLISHER&amp;BUILD_LOG_URL=%BUILD_URL%&amp;REMOTE_BUILD_NUMBER=%BUILD_NUMBER%&amp;REMOTE_BUILD_NAME=%JOB_NAME%
set PUBLISHER_JENKINS="[% remote_jenkins %]"
set PUBLISHER_JOB="[% remote_jenkins_job %]"
perl _qtqa_latest\scripts\jenkins\jenkins_job_trigger.pl -fireandforget
[%- END %]
endlocal
</command>
[%- ELSE %]
        <command>
setlocal enabledelayedexpansion
echo %cfg%|findstr /i mingw491 >nul:
if %errorlevel%==0 (
set "PATH=%PATH_MINGW491%;%PATH%"
set "PATH=!PATH!;%ICUMINGW491%\bin"
set "LIBRARY=!LIBRARY!;%ICUMINGW491%\lib"
set "INCLUDE=!INCLUDE!;%ICUMINGW491%\include"
)

echo %cfg%|findstr /i mingw48 >nul:
if %errorlevel%==0 (
set "PATH=%PATH_MINGW48%;!PATH!"
set "PATH=!PATH!;%ICUMINGW48%\bin"
set "LIBRARY=!LIBRARY!;%ICUMINGW48%\lib"
set "INCLUDE=!INCLUDE!;%ICUMINGW48%\include"
)

echo %cfg%|findstr /i winrt >nul||echo %cfg%|findstr /i winphone >nul:
if %errorlevel%==0 (
set "TARGET_ARCHITECTURE=x86"
) else (
set "TARGET_ARCHITECTURE=%PROCESSOR_ARCHITECTURE%"
)

echo %cfg%|findstr /i wince70embedded >nul:
if %errorlevel%==0 (
REM LIB/INCLUDE contains desktop openssl/icu paths as set in jenkins ini,
REM reset them before calling vsvars32.bat if we are building for WEC7
set LIB=
set INCLUDE=
)
echo %cfg%|findstr /i msvc2008 >nul:
if %errorlevel%==0 (
call "%VS90COMNTOOLS%\vsvars32.bat"
)

echo %cfg%|findstr /i msvc2010 >nul:
if %errorlevel%==0 (
call "%VS100COMNTOOLS%\vsvars32.bat"
)

echo %cfg%|findstr /i msvc2012 >nul:
if %errorlevel%==0 (
call "%MSVC2012_DIR%\vcvarsall.bat" %TARGET_ARCHITECTURE%
set "PATH=!PATH!;%ICU2012%\bin;%ICU2012%\lib"
set "LIB=!LIB!;%ICU2012%\lib"
set "INCLUDE=!INCLUDE!;%ICU2012%\include"
)

echo %cfg%|findstr /i msvc2013 >nul:
if %errorlevel%==0 (
call "%MSVC2013_DIR%\vcvarsall.bat" %TARGET_ARCHITECTURE%
set "PATH=!PATH!;%ICU2013%\bin;%ICU2013%\lib"
set "LIB=!LIB!;%ICU2013%\lib"
set "INCLUDE=!INCLUDE!;%ICU2013%\include"
)
cd %CI_NODE_ROOT%\build
set GIT_BRANCH=%qt_ci_git_ref%
set
call git remote add origin -t %qt_ci_git_ref% %qt_ci_git_url%
if errorlevel 1 exit /b 1
call git pull origin %qt_ci_git_ref%
if errorlevel 1 exit /b 1
call git init _testconfig
if errorlevel 1 exit /b 1
cd _testconfig
call git fetch qt-gerrit-mirror:qtqa/testconfig +refs/heads/*:refs/remotes/mirror/*
call git fetch git://github.com/tsarajar/qtqa-testconfig.git +refs/heads/*:refs/remotes/origin/*
if errorlevel 1 exit /b 1
call git reset --hard origin/master
if errorlevel 1 exit /b 1
cd ..
perl _testconfig/test.pl --project "[% testconfig_project %]"
[%- IF publish_build == "log_publisher" %]
set PUBLISHER_PARAMS="token=PUBLISHER&amp;BUILD_LOG_URL=%BUILD_URL%&amp;REMOTE_BUILD_NUMBER=%BUILD_NUMBER%&amp;REMOTE_BUILD_NAME=%JOB_NAME%
set PUBLISHER_JENKINS="[% remote_jenkins %]"
set PUBLISHER_JOB="[% remote_jenkins_job %]"
perl _qtqa_latest\scripts\jenkins\jenkins_job_trigger.pl -fireandforget
[%- END %]
endlocal
</command>
[%- END %]
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
      <condition class="org.jenkins_ci.plugins.run_condition.logic.Not">
        <condition class="org.jenkins_ci.plugins.run_condition.core.ExpressionCondition">
[%- IF on_demand == 1 %]
          <expression>^o-win.*$</expression>
[%- ELSE %]
          <expression>^.*\bwindows\b.*$</expression>
[%- END %]
          <label>${NODE_LABELS}</label>
        </condition>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <!-- GIT_BRANCH set for compatibility with Git SCM plugin -->
        <command>
[%- IF on_demand == 1 %]
cd /work/build
[%- ELSE %]
cd $CI_NODE_ROOT/build
[%- END %]
GIT_BRANCH=${qt_ci_git_ref}
export GIT_BRANCH
set
git remote add origin -t ${qt_ci_git_ref} ${qt_ci_git_url}
git pull origin ${qt_ci_git_ref}
git init _testconfig
cd _testconfig
git fetch qt-gerrit-mirror:qtqa/testconfig +refs/heads/*:refs/remotes/mirror/* || true
git fetch git://github.com/tsarajar/qtqa-testconfig.git +refs/heads/*:refs/remotes/origin/*
git reset --hard origin/master
cd ..
[%- IF publish_build == "log_publisher" %]
PUBLISHER_PARAMS="token=PUBLISHER&amp;BUILD_LOG_URL=$BUILD_URL&amp;REMOTE_BUILD_NUMBER=$BUILD_NUMBER&amp;REMOTE_BUILD_NAME=$JOB_NAME"
export PUBLISHER_PARAMS
export PUBLISHER_JENKINS="[% remote_jenkins %]"
export PUBLISHER_JOB="[% remote_jenkins_job %]"
trap 'perl _qtqa_latest/scripts/jenkins/jenkins_job_trigger.pl -fireandforget' INT TERM EXIT
[%- END %]
perl _testconfig/test.pl --project "[% testconfig_project %]"
</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </builders>

  <publishers>
    [%- IF publish_xunit == 1 %]
    <xunit>
      <types>
        <QTestLibType>
          <pattern>**/_artifacts/test-logs/*.xml</pattern>
          <failIfNotNew>false</failIfNotNew>
          <deleteOutputFiles>true</deleteOutputFiles>
          <stopProcessingIfError>false</stopProcessingIfError>
        </QTestLibType>
      </types>
    </xunit>

    [%- END %]
    [%- IF publish_build == 1 %]
    <hudson.plugins.build__publisher.BuildPublisher plugin="build-publisher">
      <publishUnstableBuilds>true</publishUnstableBuilds>
      <publishFailedBuilds>true</publishFailedBuilds>
      <postActions class="vector"/>
    </hudson.plugins.build__publisher.BuildPublisher>
    [%- END %]
    [%- IF send_status_mail == 1 %]
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <recipientList></recipientList>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>no-reply@qt-project.org</replyTo>
      <saveOutput>false</saveOutput>
      <matrixTriggerMode>ONLY_PARENT</matrixTriggerMode>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    [%- END %]

    <!--
        To upload test xml logs to Jenkins master
    -->
    <hudson.tasks.ArtifactArchiver>
      <artifacts>**/*.xml</artifacts>
      <latestOnly>false</latestOnly>
      <allowEmptyArchive>true</allowEmptyArchive>
    </hudson.tasks.ArtifactArchiver>

    [%- IF publish_build == "postbuild_publisher" %]
    <!--
        Run postbuild script, which will take care of uploading nightly build results
        and sending e-mail
    -->
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript>
      <buildSteps>
        <hudson.tasks.Shell>
          <command>
rm -f ./state_postbuild.py
cp $JENKINS_HOME/state_postbuild.py .
python ./state_postbuild.py -u $JOB_URL -n $BUILD_NUMBER
          </command>
        </hudson.tasks.Shell>
      </buildSteps>
      <scriptOnlyIfSuccess>false</scriptOnlyIfSuccess>
      <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
      <executeOn>MATRIX</executeOn>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    [%- END %]
    <!--
        post-build step:

          - reboot test machine, set temporarily offline;
            it is expected to bring itself back online at next boot.

          - post an event to the integrator script so it knows the build's state
            has changed; script is assumed to be running on the same host as Jenkins.
    -->
    [%- IF on_demand == 0 %]
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
      <groovyScript>
import hudson.slaves.OfflineCause.SimpleOfflineCause
import hudson.util.RemotingDiagnostics
import java.io.PrintWriter
import java.io.StringWriter

// returns full stack trace of a throwable 't' as a string
def getStackTrace(t) {
    def sw = new StringWriter()
    def pw = new PrintWriter(sw, true)
    t.printStackTrace(pw)
    pw.flush()
    sw.flush()
    return sw.toString()
}

// FIXME: why cannot we import jenkins.util.NonLocalizable ?
class OfflineMessage extends org.jvnet.localizer.Localizable {
  def message
  OfflineMessage() {
    super(null, null, [])
    def timestr = new Date().format("HH:mm dd/MM/yy z", TimeZone.getTimeZone("UTC"))
    this.message = "automated reboot at end of test at " + timestr
  }
  String toString() {
    this.message
  }
  String toString(java.util.Locale l) {
    toString()
  }
}

def computer = manager.build.getBuiltOn().toComputer()
def channel = computer.getChannel()
def cause = SimpleOfflineCause.create(new OfflineMessage())

def rebooted = 0

for (i in 1..5) {
  try {
    RemotingDiagnostics.executeGroovy( """

      if (Functions.isWindows()) {
        'shutdown /r /t 10 /c "Restarting after Jenkins test completed"'.execute()
      } else {
        "sudo -n /sbin/reboot".execute()
      }

    """, channel )
    rebooted = i
    break
  } catch (Exception e) {
    manager.addWarningBadge("could not reboot [attempt " + i + "]: " + getStackTrace(e))
    // disconnecting the computer, waiting for it to reconnect and reinitializing the
    // channel helps to recover from "Could not initialize class org.codehause.groovy.runtime.InvokerHelper",
    // which occurs on slaves sometimes (with Jenkins 1.466) for unknown reasons.
    computer.disconnect(cause).get()
    sleep(30000)
    channel = computer.getChannel()
    def attempts = 0
    while (channel == null &amp;&amp; ++attempts &lt; 5) {
      sleep(30000)
      channel = computer.getChannel()
    }
  }
}

if (rebooted == 0) {
  manager.addShortText("reboot failed")
} else if (rebooted > 1) {
  manager.addShortText("rebooted after " + rebooted + " attempts")
} else {
  manager.addInfoBadge("rebooted after build")
}

if (rebooted) {
  // make sure jobs cannot be scheduled until after the node reboots
  computer.setTemporarilyOffline(true, cause)
  computer.disconnect(cause).get()
}

s = new Socket("localhost", 7182)
s &lt;&lt; '{"type":"build-updated","job":"[% name %]","build":' &lt;&lt; manager.build.number &lt;&lt; '}'
s.close()
      </groovyScript>
      <behavior>0</behavior>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    [%- END %]
    [%- IF on_demand == 1 %]
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
      <groovyScript>
import hudson.slaves.OfflineCause.SimpleOfflineCause
import hudson.util.RemotingDiagnostics
import java.io.PrintWriter
import java.io.StringWriter

// returns full stack trace of a throwable 't' as a string
def getStackTrace(t) {
    def sw = new StringWriter()
    def pw = new PrintWriter(sw, true)
    t.printStackTrace(pw)
    pw.flush()
    sw.flush()
    return sw.toString()
}

// FIXME: why cannot we import jenkins.util.NonLocalizable ?
class OfflineMessage extends org.jvnet.localizer.Localizable {
  def message

  OfflineMessage(msg) {
    super(null, null, [])
    this.message = msg
  }
  String toString() {
    this.message
  }
  String toString(java.util.Locale l) {
    toString()
  }
}

def computer = manager.build.getBuiltOn().toComputer()
def channel = computer.getChannel()
def timestr = new Date().format("HH:mm dd/MM/yy z", TimeZone.getTimeZone("UTC"))
def msg
if (manager.build.buildVariables.get("DELETE_VM") == "true") {
    msg = "Node brought offline after build at " + timestr
} else {
    msg = "Node brought offline after build at " + timestr + ". KEEP"
}
    def cause = SimpleOfflineCause.create(new OfflineMessage(msg))

// make sure jobs cannot be scheduled until after the node reboots
computer.setTemporarilyOffline(true, cause)

      </groovyScript>
      <behavior>0</behavior>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    [%- END %]
  </publishers>

  <!-- try to keep any boilerplate which will rarely need any changes under here -->
  <scm class="hudson.scm.NullSCM"/>
  <scmCheckoutRetryCount>5</scmCheckoutRetryCount>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
  <actions/>
  <keepDependencies>false</keepDependencies>
  <canRoam>true</canRoam>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <concurrentBuild>true</concurrentBuild>
</matrix-project>
